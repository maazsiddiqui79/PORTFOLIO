TITLE:
Cookie Clicker Automation Tool	

DESC:
"A tool that automates cookie clicking, purchases upgrades, and manages game progress to boost performance without manual input."	
BODY:
<h1>Automated Cookie Clicker GUI</h1> <p><a href="https://github.com/maazsiddiqui79/100-Days-Python-Project/tree/main/49.%20Day48%20-Automated%20Game%20(Cookie%20Clicker)%20using%20selenium" target="_blank">GitHub Repository</a></p> <hr /> <h2><strong>Type:</strong> Automation / Game Bot</h2> <hr /> <h2><strong>Short Description</strong></h2> <p>An automated bot for the popular browser-based game &quot;Cookie Clicker&quot;, built using Selenium WebDriver. This tool interacts with the game&#39;s GUI to simulate rapid clicking, automatically purchase upgrades, and optimize gameplay strategies based on available in-game resources.</p> <h2>Automated Gameplay Using Selenium</h2> <p>The bot uses Python&#39;s Selenium library to launch and control a web browser session. It identifies the cookie element and upgrade items through XPath or CSS selectors, automating clicks and purchases in real-time.</p> <h2>Core Automation Logic</h2> <p>A loop runs continuously, clicking the cookie at high frequency while checking for upgrades and store items at regular intervals. It selects the best affordable items, optimizing gameplay progress. Timers and delays are managed for consistent performance.</p> <h2>GUI Integration</h2> <p>Includes a simple Tkinter-based GUI that allows the user to start and stop the automation, set the click frequency, and monitor live bot status such as current score, upgrades bought, and elapsed time.</p> <h2>Example Use Case</h2> <p>Useful for demonstrating browser automation capabilities, automating repetitive game tasks, or building proof-of-concept bots for games or web-based productivity tools. Serves as a great entry-level project for mastering Selenium and GUI integration.</p> <h2>Security and Control Features</h2> <ul> <li>Controlled automation through start/stop toggles</li> <li>Exception handling to prevent Selenium crashes</li> <li>Safe selectors and timeout management to prevent overloading the browser</li> </ul> <h2>Key Features</h2> <ul> <li>Automatic cookie clicking</li> <li>Purchasing upgrades and store items based on in-game currency</li> <li>Live GUI dashboard using Tkinter</li> <li>Adjustable click speed and refresh intervals</li> <li>Error handling and process termination support</li> </ul> <hr />		